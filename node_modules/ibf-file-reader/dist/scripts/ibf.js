"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const IBFRecord_1 = require("../src/IBFRecord");
const LogRecord_1 = require("../src/LogRecord");
function ibfFile(callback) {
    fs.readdir(".", (err, files) => {
        if (err !== null) {
            callback(err);
        }
        let ibfFiles = files.filter(f => {
            return f.endsWith(".ibf");
        });
        if (ibfFiles.length == 0) {
            callback(Error('No IBF file found.'));
        }
        else {
            console.log("Proecssing " + ibfFiles[0]);
            callback(ibfFiles[0]);
        }
    });
}
exports.ibfFile = ibfFile;
function inspectFile(result) {
    if (typeof result !== "string") {
        console.error(result);
    }
    else {
        let reader = new IBFRecord_1.IBFRecordReader();
        fs.readFile(result, (err, buffer) => {
            if (err != null) {
                console.log(err);
                return;
            }
            let record;
            let recordCount = -18;
            while (true) {
                [record, buffer] = reader.read(buffer);
                if (record == null || buffer.length == 0) {
                    break;
                }
                recordCount++;
                let [parsed, err] = LogRecord_1.LogRecordParser.parseLogRecord(record);
                if (err) {
                    console.log(err);
                }
                else {
                    let recordType;
                    if (typeof parsed["historyLogRecordType"] !== 'undefined') {
                        recordType = LogRecord_1.HistoryLogRecordType[parsed["historyLogRecordType"]];
                    }
                    else {
                        recordType = LogRecord_1.LogRecordType[parsed.logType];
                    }
                    console.log(recordCount + ": " + recordType + JSON.stringify(parsed));
                }
            }
        });
    }
}
exports.inspectFile = inspectFile;
//# sourceMappingURL=ibf.js.map